{"version":3,"file":"component---src-pages-typology-index-tsx-75651cf217a8a0eacd1e.js","mappings":"yKAIO,MAAMA,EAAmDC,IAAmB,IAAlB,SAAEC,GAAU,EAC3E,OACEC,EAAAA,cAACC,EAAAA,EAAU,CAACC,YAAU,GACpBF,EAAAA,cAACG,EAAAA,EAAS,CAACC,UAAU,UAAUC,SAAS,MACrCN,GAEQ,C,+HCPjB,SAASO,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,OACHC,EAAAA,EAAAA,MAAsBL,EAAMM,YAC/B,OAAOb,EAAAA,cAAoBQ,EAAYG,GAAI,KAAM,aACnD,CAKA,MAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOO,QAASC,GAAaN,OAAOC,OAAO,CAAC,GAAGE,EAAAA,EAAAA,MAAsBL,EAAMM,YAC3E,OAAOE,EAAYf,EAAAA,cAAoBe,EAAWR,EAAOP,EAAAA,cAAoBM,EAAmBC,IAAUD,EAAkBC,EAC9H,E,UCNA,MAQaS,EAAO,IAAMhB,EAAAA,cAACiB,EAAAA,EAAG,CAACC,MAAM,aAErC,MAVqB,IAEjBlB,EAAAA,cAACH,EAAAA,EAAa,KACZG,EAAAA,cAACmB,EAAO,M,sECwBP,MAAMC,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBR,GAC/B,MAAMS,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfP,EACFA,EAAWS,GAGb,IAAIA,KAAsBT,IAChC,CAACS,EAAmBT,GACzB,C","sources":["webpack://strudel/./src/components/SidebarLayout.tsx","webpack://strudel/./src/content/typology/typology.mdx","webpack://strudel/./src/pages/typology/index.tsx","webpack://strudel/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["import * as React from 'react';\nimport { Box, Container, Stack } from '@mui/material';\nimport { BaseLayout } from './BaseLayout';\n\nexport const SidebarLayout: React.FC<React.PropsWithChildren> = ({ children }) => {\n  return (\n    <BaseLayout hasSidebar>\n      <Container component=\"article\" maxWidth=\"md\">\n        {children}\n      </Container>\n    </BaseLayout>\n  )\n};","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\"\n  }, _provideComponents(), props.components);\n  return React.createElement(_components.h1, null, \"Background\");\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import * as React from 'react';\nimport { BaseLayout } from '../../components/BaseLayout';\nimport Seo from '../../components/Seo';\nimport Content from \"../../content/typology/typology.mdx\";\nimport { SidebarLayout } from '../../components/SidebarLayout';\n\nconst TypologyPage = () => {\n  return (\n    <SidebarLayout>\n      <Content />\n    </SidebarLayout>\n  );\n};\n\nexport const Head = () => <Seo title=\"Typology\" />\n\nexport default TypologyPage","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["SidebarLayout","_ref","children","React","BaseLayout","hasSidebar","Container","component","maxWidth","_createMdxContent","props","_components","Object","assign","h1","_provideComponents","components","wrapper","MDXLayout","Head","Seo","title","Content","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}